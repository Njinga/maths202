{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\mat202\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\mat202\\src\\components\\HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\mat202\\src\\components\\HelloWorld.vue","mtime":1593274231783},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\mat202\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\mat202\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\mat202\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\mat202\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}